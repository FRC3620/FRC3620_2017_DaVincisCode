// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.FRC36202017DaVincisCode;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import org.slf4j.Logger;
import org.usfirst.frc3620.FRC36202017DaVincisCode.commands.*;
import org.usfirst.frc3620.FRC36202017DaVincisCode.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	// 3620 stuff
	static RobotMode currentRobotMode = RobotMode.INIT, previousRobotMode;
	static Logger logger;

	public static PowerDistributionPanel powerDistributionPanel;

	public static CANDeviceFinder canDeviceFinder;

    // this came with stock RobotBuilder stuff
    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveSubsystem driveSubsystem;
    public static ShooterSubsystem shooterSubsystem;
    public static GearSubsystem gearSubsystem;
    public static ClimberSubsystem climberSubsystem;
    public static IntakeSubsystem intakeSubsystem;
    public static MentorSubsystem mentorSubsystem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
		canDeviceFinder = new CANDeviceFinder();
		logger.info("CAN devices = {}", canDeviceFinder.deviceList.toString());

    	
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystem = new DriveSubsystem();
        shooterSubsystem = new ShooterSubsystem();
        gearSubsystem = new GearSubsystem();
        climberSubsystem = new ClimberSubsystem();
        intakeSubsystem = new IntakeSubsystem();
        mentorSubsystem = new MentorSubsystem();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
		allInit(RobotMode.DISABLED);
    }

    public void disabledPeriodic() {
		beginAllPeriodic();
        Scheduler.getInstance().run();
		endAllPeriodic();
    }

    public void autonomousInit() {
		allInit(RobotMode.AUTONOMOUS);

		// autonomousCommand = (Command) autoChooser.getSelected();
		if (autonomousCommand != null) {
		    logger.info("Starting autonomous {}", autonomousCommand.getClass().getName());
			autonomousCommand.start();
		}
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
		beginAllPeriodic();
		Scheduler.getInstance().run();
		endAllPeriodic();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        allInit(RobotMode.TELEOP);
    }

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		beginAllPeriodic();
		Scheduler.getInstance().run();
		endAllPeriodic();
	}

	public void testInit() {
		// This makes sure that the autonomous stops running when
		// test starts running.
		if (autonomousCommand != null)
			((Command) autonomousCommand).cancel();

		allInit(RobotMode.TEST);
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		beginAllPeriodic();
		LiveWindow.run();
		endAllPeriodic();
	}


	/*
	 * this routine gets called whenever we change modes
	 */
	void allInit(RobotMode newMode) {
		logger.info("Switching from {} to {}", currentRobotMode, newMode);
		previousRobotMode = currentRobotMode;
		currentRobotMode = newMode;

		// if any subsystems need to know about mode changes, let
		// them know here.
	}

	/*
	 * these routines get called at the beginning and end of all periodics.
	 */
	void beginAllPeriodic() {
		// if some subsystems to get called in all modes at the beginning
		// of periodic, do it here

		// don't need to do anything
	}

	void endAllPeriodic() {
		// if some subsystems to get called in all modes at the end
		// of periodic, do it here

		// and log data!
		//updateDashboard();
	}
}
