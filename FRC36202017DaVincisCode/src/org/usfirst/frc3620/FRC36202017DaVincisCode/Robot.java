// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3620.FRC36202017DaVincisCode;

import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.text.DecimalFormat;

import org.slf4j.Logger;


import java.io.IOException;


import org.usfirst.frc3620.FRC36202017DaVincisCode.commands.*;
import org.usfirst.frc3620.FRC36202017DaVincisCode.subsystems.*;

import org.usfirst.frc3620.logger.DataLogger;
import org.usfirst.frc3620.logger.EventLogging;
import org.usfirst.frc3620.logger.EventLogging.Level;
import org.usfirst.frc3620.misc.CANDeviceFinder;
import org.usfirst.frc3620.misc.RobotMode;
import org.usfirst.frc3620.logger.RandomFastLogger;
import org.usfirst.frc3620.vision.UDPReceiver;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	// 3620 stuff
	static RobotMode currentRobotMode = RobotMode.INIT, previousRobotMode;

	static Logger logger;
	public static DataLogger robotDataLogger;
	public static DriverStation driverStation = DriverStation.getInstance();
	public static boolean pdpIsPresent;
	public static CANDeviceFinder canDeviceFinder;
	public static PowerDistributionPanel powerDistributionPanel = new PowerDistributionPanel();
	public static BuiltInAccelerometer builtinAccelerometer = new BuiltInAccelerometer();

	// this came with stock RobotBuilder stuff
	Command autonomousCommand;

	public static OI oi;
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static DriveSubsystem driveSubsystem;
	public static ShooterSubsystem shooterSubsystem;
	public static GearSubsystem gearSubsystem;
	public static ClimberSubsystem climberSubsystem;
	public static IntakeSubsystem intakeSubsystem;
	public static MentorSubsystem mentorSubsystem;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		// --------------------------------------------------------------
		// set up logging
		logger = EventLogging.getLogger(Robot.class, Level.INFO);

		canDeviceFinder = new CANDeviceFinder();
		logger.info("CAN devices = {}", canDeviceFinder.getDeviceList());
		pdpIsPresent = canDeviceFinder.isPDPPresent();
		logger.info("PDP present = {}", pdpIsPresent);

		robotDataLogger = new DataLogger();
		addRobotDataLoggerDataProviders();


		// --------------------------------------------------------------
		// regular RobotBuilder stuff
		RobotMap.init();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        try
   		{
   			new UDPReceiver().start();
   		} catch (IOException e)
   		{
   			e.printStackTrace();
   		}
        
    


		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveSubsystem = new DriveSubsystem();
		shooterSubsystem = new ShooterSubsystem();
		gearSubsystem = new GearSubsystem();
		climberSubsystem = new ClimberSubsystem();
		intakeSubsystem = new IntakeSubsystem();
		mentorSubsystem = new MentorSubsystem();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		autonomousCommand = new AutonomousCommand();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		// --------------------------------------------------------------
		// finish up 3620 stuff
		
		robotDataLogger.setInterval(1.000);
		robotDataLogger.start();
		
		// testing only!
		// RandomFastLogger.startRandomFastLogger("random.test");
	}


	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {
		processRobotModeChange(RobotMode.DISABLED);
	}

    /**
     * This function is called periodically during operator control
     */


	public void disabledPeriodic() {
		beginPeriodic();
		Scheduler.getInstance().run();
		endPeriodic();
	}

	public void autonomousInit() {
		processRobotModeChange(RobotMode.AUTONOMOUS);

		// autonomousCommand = (Command) autoChooser.getSelected();
		if (autonomousCommand != null) {
			logger.info("Starting autonomous {}", autonomousCommand.getClass().getName());
			autonomousCommand.start();
		}
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		beginPeriodic();
		Scheduler.getInstance().run();
		endPeriodic();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();

		processRobotModeChange(RobotMode.TELEOP);
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		beginPeriodic();
		Scheduler.getInstance().run();
		endPeriodic();
	}


	public void testInit() {
		// This makes sure that the autonomous stops running when
		// test starts running.
		if (autonomousCommand != null)
			((Command) autonomousCommand).cancel();

		processRobotModeChange(RobotMode.TEST);
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		beginPeriodic();
		LiveWindow.run();
		endPeriodic();
	}

	/*
	 * this routine gets called whenever we change modes
	 */
	void processRobotModeChange(RobotMode newMode) {
		logger.info("Switching from {} to {}", currentRobotMode, newMode);
		previousRobotMode = currentRobotMode;
		currentRobotMode = newMode;

		// if any subsystems need to know about mode changes, let
		// them know here.
		driveSubsystem.processRobotModeChange(newMode);
	}

	/*
	 * these routines get called at the beginning and end of all periodics.
	 */
	void beginPeriodic() {
		// if some subsystems need to get called in all modes at the beginning
		// of periodic, do it here

		// don't need to do anything
	}

	void endPeriodic() {
		// if some subsystems need to get called in all modes at the end
		// of periodic, do it here

		// and log data!
		// updateDashboard();
//		SmartDashboard.putString("currentCommand", driveSubsystem.getCurrentCommand().getName());
		gearSubsystem.updateDashboard();
		shooterSubsystem.updateDashboard();
	}

	void addRobotDataLoggerDataProviders() {
		robotDataLogger.addDataProvider("robotMode", () -> currentRobotMode.toString());
		robotDataLogger.addDataProvider("robotModeInt", () -> currentRobotMode.ordinal());
		robotDataLogger.addDataProvider("batteryVoltage", () -> f2(driverStation.getBatteryVoltage()));

		if (pdpIsPresent) {
			robotDataLogger.addDataProvider("pdp.totalCurrent", () -> f2(powerDistributionPanel.getTotalCurrent()));
			robotDataLogger.addDataProvider("pdp.totalPower", () -> f2(powerDistributionPanel.getTotalPower()));
			robotDataLogger.addDataProvider("pdp.totalEnergy", () -> f2(powerDistributionPanel.getTotalEnergy()));
		}

		robotDataLogger.addDataProvider("bi.accel.x", () -> f2(builtinAccelerometer.getX()));
		robotDataLogger.addDataProvider("bi.accel.y", () -> f2(builtinAccelerometer.getY()));
		robotDataLogger.addDataProvider("bi.accel.z", () -> f2(builtinAccelerometer.getZ()));

	}

	private DecimalFormat f2Formatter = new DecimalFormat("#.##");

	private String f2(double f) {
		String rv = f2Formatter.format(f);
		return rv;
	}
}
