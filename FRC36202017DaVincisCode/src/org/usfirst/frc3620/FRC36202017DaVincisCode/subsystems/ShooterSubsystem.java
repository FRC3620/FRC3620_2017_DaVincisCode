// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.FRC36202017DaVincisCode.subsystems;

import org.usfirst.frc3620.FRC36202017DaVincisCode.Robot;
import org.usfirst.frc3620.FRC36202017DaVincisCode.RobotMap;
import org.usfirst.frc3620.FRC36202017DaVincisCode.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class ShooterSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon shooterCANTalon2 = RobotMap.shooterSubsystemShooterCANTalon2;
    private final CANTalon shooterCANTalon3 = RobotMap.shooterSubsystemShooterCANTalon3;
    private final SpeedController shooterImpellerTalon = RobotMap.shooterSubsystemShooterImpellerTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  Timer timer = new Timer();
    
    boolean shooterWasRunning;

   
    
    public void setShooterSpeed(double speed){
    	shooterCANTalon2.changeControlMode(TalonControlMode.Speed);
    	shooterCANTalon2.set(speed);
    }
    
    
    public void stopShooter(){
    	shooterCANTalon2.changeControlMode(TalonControlMode.PercentVbus);
    	shooterCANTalon2.set(0);
    }
   
    public boolean isShooterSpunUp(){
		return timer.get() > 2;
    }
    
    public void runImpeller(double power){
    	shooterImpellerTalon.set(power);
    }
    
    public void updatePIDFromDashboard(){
    	double shooterP= edu.wpi.first.wpilibj.Preferences.getInstance().getDouble("shooterP", 60);
        double shooterI= edu.wpi.first.wpilibj.Preferences.getInstance().getDouble("shooterI", 0);
        double shooterD= edu.wpi.first.wpilibj.Preferences.getInstance().getDouble("shooterD", 0);
        shooterCANTalon2.setPID(shooterP, shooterI, shooterD);
    }
    
    public ShooterSubsystem() {
		super();
		
		shooterCANTalon2.enableBrakeMode(false);
		shooterCANTalon2.reverseSensor(true);
		shooterCANTalon2.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		shooterCANTalon2.configEncoderCodesPerRev(20);
		shooterCANTalon2.setPosition(0);
		shooterCANTalon2.setForwardSoftLimit(+15);
		shooterCANTalon2.setReverseSoftLimit(-15);;
	
		updatePIDFromDashboard();
		shooterCANTalon2.setF(.1097);
		shooterCANTalon2.changeControlMode(CANTalon.TalonControlMode.Speed);
    
		shooterCANTalon3.enableBrakeMode(false);
		shooterCANTalon3.changeControlMode(CANTalon.TalonControlMode.Follower);
		shooterCANTalon3.set(shooterCANTalon2.getDeviceID());
		
    }
		
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    	
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void updateDashboard(){
    	if (Robot.canDeviceFinder.isSRXPresent(shooterCANTalon2)) {
        	SmartDashboard.putNumber("ShooterOutputVoltage2", shooterCANTalon2.getOutputVoltage());
        	SmartDashboard.putNumber("ShooterOutputSpeed2", shooterCANTalon2.getSpeed());
        	SmartDashboard.putNumber("ShooterGet2", shooterCANTalon2.get());
        	SmartDashboard.putNumber("ShooterOutputError2", shooterCANTalon2.getError());
        	SmartDashboard.putNumber("ShooterEncoderVelocity2", shooterCANTalon2.getEncVelocity());
        	SmartDashboard.putNumber("ShooterClosedLoopError2", shooterCANTalon2.getClosedLoopError());
        	SmartDashboard.putNumber("ShooterOutputCurrent2", shooterCANTalon2.getOutputCurrent());

        	SmartDashboard.putNumber("ShooterP", shooterCANTalon2.getP());
        	SmartDashboard.putNumber("ShooterI", shooterCANTalon2.getI());
        	SmartDashboard.putNumber("ShooterD", shooterCANTalon2.getD());
        
    	}
    	if (Robot.canDeviceFinder.isSRXPresent(shooterCANTalon3)) {
        	SmartDashboard.putNumber("ShooterOutputVoltage3", shooterCANTalon3.getOutputVoltage());
        	SmartDashboard.putNumber("ShooterOutputCurrent3", shooterCANTalon3.getOutputCurrent());
    	}
    }
}

