// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.FRC36202017DaVincisCode.subsystems;

import org.slf4j.Logger;
import org.usfirst.frc3620.logger.EventLogging;
import org.usfirst.frc3620.logger.EventLogging.Level;
import org.usfirst.frc3620.misc.RobotMode;

import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.SerialPort.Port;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class MentorSubsystem extends Subsystem {
	SerialPort serialPort;
	Logger logger = EventLogging.getLogger(getClass(), Level.INFO);

	public MentorSubsystem() {
		super();
		try {
			serialPort = new SerialPort(9600, Port.kUSB);
			serialPort.enableTermination();
		} catch (Exception e) {
			logger.error("trouble setting up serial port", e);
		}
	}


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
	public void processRobotModeChange(RobotMode robotMode)
	{
		try {
		    serialPort.writeString(robotMode.toString() + "\n");
		    serialPort.flush();
		} catch (Exception e) {
			logger.error("trouble writing to serial port", e);
		}
	}
	
	public void endPeriodic() {
		try {
			String s = serialPort.readString();
			if (s != null) {
				logger.info("received information from Arduino: {}", s);
			}
		} catch (Exception e) {
			logger.error("trouble writing to serial port", e);
		}
	}


}

